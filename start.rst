================================
 Настройка окружения для работы
================================

.. contents::
   :local:

Выбор ОС
========

Предполагается, что у разработчика установлена ОС на базе Linux.
Если Вы достаточно хорошо знакомы с подобными ОС, то этот раздел можно пропустить.

Для начинающих пользователей подобных ОС, самый подходящий вариант - это Linux Mint.
На момент написания этих строк, эта ОС распространяется в 4-х вариантах.
Предлагается использовать `Linux Mint с рабочим окружением Xfce <https://linuxmint.com/edition.php?id=286>`__.

Данный раздел не будет затрагивать процесс установки данной ОС.
При возникновении вопросов по процессу установки, свяжитесь с ведущим разработчиком.

О терминале
===========

Под терминалом можно назвать аналог интерпретатора командой строки в Windows (cmd.exe).
В процессе работы он очень часто используется.

Везде, где говорится "выполните эту команду", подразумевается открыть терминал и ввести туда указанную команду.

Настройка путей и переменных окружения
======================================

Предполагается, что все для работы будет находиться в каталоге ``/opt``.

Создаем каталог ``/opt`` и устанавливаем владельца этого каталога на текущего пользователя.

.. code-block:: sh

   sudo mkdir /opt
   sudo chown $USER:$USER /opt

Также создаем каталог ``/opt/bin`` в котором будут храняться исполняемые файлы или символические ссылки на исполняемые файлы.

.. code-block:: sh

   mkdir /opt/bin

Этот каталог надо добавить в переменную окружения PATH. Для этого в файле ~/.bashrc в самом конце добавляем следующую строку:

   export PATH=/opt/bin:$PATH

И перезапустите терминал.


Установка программ
==================

Для работы необходимо установить:

1. систему контроля версий git
2. интерпретатор Python 3
3. утилиту для создании виртуальных окружений
4. Docker
5. docker-compose

Для установки всех перечисленных выполните следующую команду:

.. code-block:: sh

    sudo apt-get update
    sudo apt-get install git python3 python3-venv docker.io docker-compose-v2

Проверка установки Docker
-------------------------

Чтобы убедиться, что Docker успешно установлен и работает, выполните следующую команду:

.. code-block:: sh

    sudo docker run hello-world

В случае успеха вернет многобукав среди которых будет "Hello from Docker!".

Напоследок, чтобы была возможность выполнять команды docker и docker-compose без sudo:

1. выполните следующую команду:

.. code-block:: sh

    sudo usermod -aG docker $USER

2. перелогинтесь
3. проверьте, что следующая команда не выведет что-то на подобии Permission denied

.. code-block:: sh

   docker run hello-world

Установка IDE
-------------

Тут выбираем любой IDE на свой вкус.

- PyCharm Community: https://www.jetbrains.com/help/pycharm/installation-guide.html

- Giga IDE: https://gigaide.ru/downloadlast/gigaideCE-241.15989.150.tar.gz

Для простоты будем считать, что мы установили PyCharm Community.

Установка шаблонизатора
-----------------------

.. code-block:: sh

   python3 -m pip install git+https://github.com/em230418/bobtemplates.odoo.git@master

Документация: https://github.com/em230418/bobtemplates.odoo#usage

На практике эти команды сложно запомнить, поэтому тут предлагается использовать обертку под этот модуль.
Установим ее:

.. code-block:: sh

   cd /opt/bin
   wget https://raw.githubusercontent.com/em230418/bobtemplates.odoo/master/contrib/mb
   chmod +x mb

В разделе "Первый модуль" будут затрагиваться различия в использования шаблонизатора с оберткой ``mb`` и без нее.

Разоварачивание Odoo
====================

Существуют готовые настройки, чтобы развернуть Odoo для разработки.
Для начала их надо склонировать. На примере для Odoo 14.0 (для остальных - по-аналогии. Заменяем 14 на нужную версию):

.. code-block:: sh

   cd /opt
   git clone https://github.com/em230418/odoo-work-environment.git odoo-projects
   cd odoo-projects
   ./clone_odoo.sh 14.0

С помощью данного скрипта:

- загружаются odoo
- загружаются прочие репозитории с модулями, которые могут понадобиться для дальнейшей работы
- создаются docker образы, которые будем использовать для работы

Данный скрипт будет работать довольно долго, потому-что будет скачивать odoo и необходимые файлы для создания образа.

Структура каталога odoo-projects
--------------------------------

В каталоге odoo-project можно увидеть подкаталоги, которые соотвествуют версиями odoo.
В структура каждого из подкаталогов идентична, поэтому для пример рассмотрим каталог ``/opt/odoo-projects/14.0``

- ``common`` - каталог содержащий клонированные репозитории odoo и репозитории других модулей.

Внутри ``common`` выглядит наподобии ``ORG_OR_USERNAME/REPOSITORY``, что соотвествует к примеру репозитория ``https://github.com/ORG_OR_USERNAME/REPOSITORY``.

- ``docker`` - каталог для создании docker образов, которые будут использоваться для работы

- ``projects`` - каталог для проектов.

В качестве названия проекта практикуется использовать имя заказчика.

Настройка виртуальных окружений
-------------------------------

Нужно создать для каждой версии Odoo свое виртуальное окружение.
Эти виртуальные окружения нужны в текстовых редакторах или IDE для того, чтобы хоть как-то работали подсказки и автодополнения.

.. code-block:: sh

   cd /opt/odoo-projects/14.0
   python3 -m venv venv --prompt odoo14

Активируем это виртуальное окружение и устнавливаем odoo

.. code-block:: sh

   source venv/bin/activate
   cd vendor/odoo
   python3 -m pip install -r requirements.txt
   python3 -m pip install -e .

TODO: Прочее (надо раскидать)
=============================

В настройках PyCharm надо использовать эти витруальные окружения.
В итоге возникает необходимость для каждого клиента хранить свои настройки Odoo.
